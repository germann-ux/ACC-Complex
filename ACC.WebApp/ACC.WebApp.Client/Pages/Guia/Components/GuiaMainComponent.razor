@page "/contenido/{Tipo}/{Id:int}"

@rendermode InteractiveServer

@using ACC.WebApp.Client.Services;
@using ACC.Shared.DTOs;
@using ACC.Shared.Core;
@using ACC.Shared.Enums;
@using ACC.WebApp.Client.Pages.Guia.Components

@inject NavegacionContenidoClient Navegacion
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ProgresoUsuarioClient experiencia

<div class="guia-main-container">
    <h3 class="guia-main-title">Navegando: @TipoEnum</h3>

    @if (isLoading)
    {
        <p class="guia-main-loading">Cargando...</p>
    }
    else if (!enumValido)
    {
        <p class="guia-main-error">Tipo no válido: @Tipo</p>
    }
    else if (hijos?.Any() == true)
    {
        <ul class="guia-main-list">
            @foreach (var nodo in hijos)
            {
                bool completado = estadosSubtemas.TryGetValue(nodo.Id, out var estado) && estado;

                <li @onclick="async () => await IrANodo(nodo)" class="guia-main-list-item @(nodo.Tipo == TipoNodoJerarquico.SubTema && completado ? "subtema-completado" : "")">
                    <div class="guia-main-header">
                        <strong class="capitulo-strong">
                            @nodo.Nombre
                            @if (nodo.Tipo == TipoNodoJerarquico.SubTema && completado)
                            {
                                <br />
                                <span class="subtema-completado-badge">
                                    <svg width="18" height="18" viewBox="0 0 20 20" fill="none">
                                        <circle cx="10" cy="10" r="10" fill="#26b050" />
                                        <path d="M6 10.5L9 13.5L14 8.5" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    </svg>
                                    Completado
                                </span>
                            }
                        </strong>
                        <span class="guia-main-badge">@nodo.Tipo</span>
                    </div>

                    <p>@nodo.Descripcion</p>

                    @if (nodo.Tipo == TipoNodoJerarquico.SubTema)
                    {
                        if (!completado)
                        {
                            <div class="guia-main-footer">
                                <BtnCompletarSubtema SubTemaId="@nodo.Id" />
                            </div>
                        }
                    }
                </li>
            }
        </ul>
    }
    else
    {
        <p class="guia-main-empty">No se encontraron elementos hijos.</p>
    }
</div>

@code {
    [Parameter] public string Tipo { get; set; } = string.Empty;
    [Parameter] public int Id { get; set; }

    private List<NodoJerarquicoDto>? hijos;
    private bool isLoading = true;
    private bool enumValido = true;
    private string? userId;

    private Dictionary<int, bool> estadosSubtemas = new();

    private TipoNodoJerarquico TipoEnum => Enum.TryParse<TipoNodoJerarquico>(Tipo, ignoreCase: true, out var result)
        ? result
        : default;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        enumValido = Enum.TryParse<TipoNodoJerarquico>(Tipo, ignoreCase: true, out var result);

        if (!enumValido)
        {
            hijos = null;
            return;
        }

        isLoading = true;
        hijos = await Navegacion.ObtenerHijosAsync(result, Id);

        if (hijos is not null && userId is not null)
        {
            estadosSubtemas.Clear();

            foreach (var hijo in hijos)
            {
                if (hijo.Tipo == TipoNodoJerarquico.SubTema)
                {
                    try
                    {
                        var estado = await experiencia.ObtenerEstadoSubtema(userId, hijo.Id);
                        estadosSubtemas[hijo.Id] = estado;
                    }
                    catch
                    {
                        estadosSubtemas[hijo.Id] = false;
                    }
                }
            }
        }

        isLoading = false;
    }

    private async Task IrANodo(NodoJerarquicoDto nodo)
    {
        var tipoStr = nodo.Tipo.ToString();
        var ruta = tipoStr == "Leccion"
            ? $"/leccion/{nodo.Id}"
            : $"/contenido/{tipoStr}/{nodo.Id}";

        if (tipoStr == "SubTema" && !string.IsNullOrEmpty(userId))
        {
            await experiencia.GuardarProgresoSubTemaAsync(userId, nodo.Id);
        }

        NavigationManager.NavigateTo(ruta);
    }
}
