@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@implements IDisposable

<div class="charp-tip-container @(Mostrar ? "activo" : "")">
    <div class="charp-fondo-oscuro"></div>

    <div class="charp-tip-box slide-in">
        <img src="images/charp.webp" alt="Charp" class="charp-icon" />
        <div class="charp-texto">
            @Texto
        </div>
    </div>
</div>
<style>
    .charp-tip-container {
        position: relative;
        overflow: hidden;
        margin: 2rem 0;
    }

    .charp-fondo-oscuro {
        position: absolute;
        inset: 0;
        background-color: rgba(0, 0, 0, 0.4);
        opacity: 0;
        transition: opacity 0.4s ease;
        z-index: 0;
    }

    .charp-tip-container.activo .charp-fondo-oscuro {
        opacity: 1;
    }

    .charp-tip-box {
        position: relative;
        display: flex;
        align-items: center;
        gap: 1rem;
        background-color: #2b2e3b;
        border-left: 4px solid #6d3ce6;
        border-radius: 10px;
        padding: 1rem;
        max-width: 750px;
        z-index: 1;
        opacity: 0;
        transform: translateX(-100%);
        transition: all 0.5s ease;
    }

    .charp-tip-container.activo .charp-tip-box {
        transform: translateX(0);
        opacity: 1;
    }

    .charp-icon {
        width: 48px;
        height: 48px;
        flex-shrink: 0;
    }

    .charp-texto {
        color: #f1f3f5;
        line-height: 1.7;
    }
</style>
@code {
    [Parameter]
    public string Texto { get; set; } = string.Empty;

    private bool Mostrar { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(100); // Pequeño delay para que active la animación
            Mostrar = true;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        Mostrar = false;
    }
}
