@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using ACC.WebApp.Data;

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Cambiar contraseña</PageTitle>

    <div class="biblioteca-doc-item" style="max-width: 500px; margin: 40px auto;">
        <div class="biblioteca-doc-header">
            <h3 class="biblioteca-section-title">Cambiar contraseña</h3>
        </div>
        <section class="biblioteca-doc-content">
            <StatusMessage Message="@message" />
            <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.OldPassword" class="form-control"
                        autocomplete="current-password" placeholder="Contraseña actual" />
                    <label for="old-password" class="form-label">Contraseña actual</label>
                    <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.NewPassword" class="form-control"
                        autocomplete="new-password" placeholder="Nueva contraseña" />
                    <label for="new-password" class="form-label">Nueva contraseña</label>
                    <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control"
                        autocomplete="new-password" placeholder="Confirmar nueva contraseña" />
                    <label for="confirm-password" class="form-label">Confirmar nueva contraseña</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>
                <button type="submit" class="biblioteca-btn-completar-subtema w-100">Cambiar contraseña</button>
            </EditForm>
        </section>
    </div>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword!, Input.NewPassword!);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Tu contraseña ha sido cambiada.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Contraseña actual")]
        public string? OldPassword { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "La {0} debe tener al menos {2} y máximo {1} caracteres.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Nueva contraseña")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirmar nueva contraseña")]
        [Compare("NewPassword", ErrorMessage = "La nueva contraseña y la confirmación no coinciden.")]
        public string? ConfirmPassword { get; set; }
    }
}
