// <auto-generated />
using System;
using ACC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ACC.Data.Migrations
{
    [DbContext(typeof(ACCDbContext))]
    [Migration("20250615034015_Initial01")]
    partial class Initial01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("acc_academic")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ACC.Data.Entities.Agenda", b =>
                {
                    b.Property<int>("Id_Agenda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Agenda"));

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id_Agenda");

                    b.HasIndex("IdUsuario")
                        .IsUnique();

                    b.ToTable("Agendas", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.Auditoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaAccion")
                        .HasColumnType("datetime2");

                    b.Property<string>("TipoAccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Auditorias", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.Aula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DocenteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ModuloId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DocenteId");

                    b.HasIndex("ModuloId");

                    b.ToTable("Aulas", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.AulaEstudiante", b =>
                {
                    b.Property<int>("AulaId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AulaId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("AulaEstudiantes", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.Aviso", b =>
                {
                    b.Property<int>("IdAviso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAviso"));

                    b.Property<int>("AulaId")
                        .HasColumnType("int");

                    b.Property<string>("ContenidoAviso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocenteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaAviso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("TituloAviso")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdAviso");

                    b.HasIndex("AulaId");

                    b.ToTable("Avisos", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.Capitulo", b =>
                {
                    b.Property<int>("IdCapitulo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCapitulo"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("LeccionId")
                        .HasColumnType("int");

                    b.Property<int>("ModuloId")
                        .HasColumnType("int");

                    b.Property<int>("SubmoduloId")
                        .HasColumnType("int");

                    b.Property<string>("SubtituloCapitulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TemaId")
                        .HasColumnType("int");

                    b.Property<string>("TituloCapitulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdCapitulo");

                    b.HasIndex("LeccionId");

                    b.HasIndex("ModuloId");

                    b.HasIndex("SubmoduloId");

                    b.HasIndex("TemaId");

                    b.ToTable("Capitulos", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.CapituloTags", b =>
                {
                    b.Property<int>("Id_Capitulo")
                        .HasColumnType("int");

                    b.Property<int>("Id_Tag")
                        .HasColumnType("int");

                    b.HasKey("Id_Capitulo", "Id_Tag");

                    b.HasIndex("Id_Tag");

                    b.ToTable("CapituloTags", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.ContenidoCapitulo", b =>
                {
                    b.Property<int>("IdContenido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdContenido"));

                    b.Property<int>("CapituloId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Dificultad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duracion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EtiquetaNivel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("HtmlBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconoBadge")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Subtitulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdContenido");

                    b.HasIndex("CapituloId");

                    b.ToTable("ContenidoCapitulos", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.ExamenHabilitado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaHabilitacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("bit");

                    b.Property<int>("Id_SubModulo")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Id_SubModulo");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ExamenesHabilitados", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.HistorialCalificaciones", b =>
                {
                    b.Property<int>("Id_Historial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Historial"));

                    b.Property<decimal>("Calificacion")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("FechaCalificacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_Modulo")
                        .HasColumnType("int");

                    b.Property<int?>("Id_SubModulo")
                        .HasColumnType("int");

                    b.Property<string>("Id_Usuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id_Historial");

                    b.HasIndex("Id_Modulo");

                    b.HasIndex("Id_SubModulo");

                    b.HasIndex("Id_Usuario");

                    b.ToTable("HistorialCalificaciones", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.Leccion", b =>
                {
                    b.Property<int>("IdLeccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLeccion"));

                    b.Property<string>("DescripcionLeccion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("HtmlBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdEvaluacion")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("OrdenSecciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubtemaId")
                        .HasColumnType("int");

                    b.Property<bool>("TieneActividad")
                        .HasColumnType("bit");

                    b.Property<bool>("TieneCompilador")
                        .HasColumnType("bit");

                    b.Property<bool>("TieneEvaluacion")
                        .HasColumnType("bit");

                    b.Property<string>("TituloLeccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UrlActividad")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdLeccion");

                    b.HasIndex("SubtemaId");

                    b.ToTable("Lecciones", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.Modulo", b =>
                {
                    b.Property<int>("Id_Modulo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Modulo"));

                    b.Property<string>("DescripcionModulo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NombreModulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id_Modulo");

                    b.ToTable("Modulos", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.ModuloTags", b =>
                {
                    b.Property<int>("Id_Modulo")
                        .HasColumnType("int");

                    b.Property<int>("Id_Tag")
                        .HasColumnType("int");

                    b.HasKey("Id_Modulo", "Id_Tag");

                    b.HasIndex("Id_Tag");

                    b.HasIndex("Id_Modulo", "Id_Tag")
                        .IsUnique();

                    b.ToTable("ModuloTags", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.Notificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AulaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEnvio")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Leido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AulaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Notificaciones", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.ProgresoUsuario", b =>
                {
                    b.Property<int>("IdProgreso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProgreso"));

                    b.Property<bool>("Completado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubTemaId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdProgreso");

                    b.HasIndex("SubTemaId");

                    b.ToTable("ProgresoUsuarios", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.SubModulo", b =>
                {
                    b.Property<int>("Id_SubModulo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_SubModulo"));

                    b.Property<string>("DescripcionSubModulo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Id_Modulo")
                        .HasColumnType("int");

                    b.Property<string>("NombreSubModulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id_SubModulo");

                    b.HasIndex("Id_Modulo");

                    b.ToTable("SubModulos", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.SubTema", b =>
                {
                    b.Property<int>("Id_SubTema")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_SubTema"));

                    b.Property<string>("DescripcionSubTema")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Id_Tema")
                        .HasColumnType("int");

                    b.Property<string>("NombreSubTema")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id_SubTema");

                    b.HasIndex("Id_Tema");

                    b.ToTable("SubTemas", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.Tag", b =>
                {
                    b.Property<int>("Id_Tag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Tag"));

                    b.Property<string>("DescripcionTag")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NombreTag")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id_Tag");

                    b.ToTable("Tags", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.TareaAsignada", b =>
                {
                    b.Property<int>("IdTareaAsignada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTareaAsignada"));

                    b.Property<int?>("AgendaId")
                        .HasColumnType("int");

                    b.Property<int>("AulaId")
                        .HasColumnType("int");

                    b.Property<bool?>("Completada")
                        .HasColumnType("bit");

                    b.Property<string>("DescripcionTareaAsignada")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("FechaLimiteTareaAsignada")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TituloTareaAsignada")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdTareaAsignada");

                    b.HasIndex("AgendaId");

                    b.HasIndex("AulaId");

                    b.ToTable("TareasAsignadas", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.TareaPersonal", b =>
                {
                    b.Property<int>("TareaPersonalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TareaPersonalId"));

                    b.Property<bool?>("Completada")
                        .HasColumnType("bit");

                    b.Property<int?>("IdAgenda")
                        .HasColumnType("int");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TareaPersonalDescripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("TareaPersonalFechaLimite")
                        .HasColumnType("datetime2");

                    b.Property<string>("TareaPersonalTitulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TareaPersonalId");

                    b.HasIndex("IdAgenda");

                    b.ToTable("TareasPersonales", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.Tema", b =>
                {
                    b.Property<int>("Id_Tema")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Tema"));

                    b.Property<string>("DescripcionTema")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Id_SubModulo")
                        .HasColumnType("int");

                    b.Property<string>("NombreTema")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UltimaVisita")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_Tema");

                    b.HasIndex("Id_SubModulo");

                    b.ToTable("Temas", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.TemaTags", b =>
                {
                    b.Property<int>("Id_Tema")
                        .HasColumnType("int");

                    b.Property<int>("Id_Tag")
                        .HasColumnType("int");

                    b.HasKey("Id_Tema", "Id_Tag");

                    b.HasIndex("Id_Tag");

                    b.HasIndex("Id_Tema", "Id_Tag")
                        .IsUnique();

                    b.ToTable("TemaTags", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.Tip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Tips", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProgresoGeneral")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.UsuarioModulos", b =>
                {
                    b.Property<string>("Id_Usuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id_Modulo")
                        .HasColumnType("int");

                    b.Property<decimal?>("Calificacion")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("EsCompletado")
                        .HasColumnType("bit");

                    b.Property<int>("Progreso")
                        .HasColumnType("int");

                    b.HasKey("Id_Usuario", "Id_Modulo");

                    b.HasIndex("Id_Modulo");

                    b.ToTable("UsuarioModulos", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.UsuarioSubModulos", b =>
                {
                    b.Property<string>("Id_Usuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id_SubModulo")
                        .HasColumnType("int");

                    b.Property<decimal?>("Calificacion")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("EsCompletado")
                        .HasColumnType("bit");

                    b.Property<int>("Progreso")
                        .HasColumnType("int");

                    b.HasKey("Id_Usuario", "Id_SubModulo");

                    b.HasIndex("Id_SubModulo");

                    b.ToTable("UsuarioSubModulos", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.UsuarioSubTemas", b =>
                {
                    b.Property<string>("Id_Usuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id_SubTema")
                        .HasColumnType("int");

                    b.Property<bool>("EsFavorito")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UltimaVisita")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_Usuario", "Id_SubTema");

                    b.HasIndex("Id_SubTema");

                    b.ToTable("UsuarioSubTemas", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.UsuarioTemas", b =>
                {
                    b.Property<string>("Id_Usuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id_Tema")
                        .HasColumnType("int");

                    b.Property<bool>("EsFavorito")
                        .HasColumnType("bit");

                    b.Property<int>("Progreso")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UltimaVisita")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_Usuario", "Id_Tema");

                    b.HasIndex("Id_Tema");

                    b.ToTable("UsuarioTemas", "acc_academic");
                });

            modelBuilder.Entity("ACC.Data.Entities.Agenda", b =>
                {
                    b.HasOne("ACC.Data.Entities.Usuario", "Usuario")
                        .WithOne("Agenda")
                        .HasForeignKey("ACC.Data.Entities.Agenda", "IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ACC.Data.Entities.Auditoria", b =>
                {
                    b.HasOne("ACC.Data.Entities.Usuario", "Usuario")
                        .WithMany("Auditorias")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ACC.Data.Entities.Aula", b =>
                {
                    b.HasOne("ACC.Data.Entities.Usuario", "Docente")
                        .WithMany("AulasDocente")
                        .HasForeignKey("DocenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ACC.Data.Entities.Modulo", "Modulo")
                        .WithMany("Aulas")
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Docente");

                    b.Navigation("Modulo");
                });

            modelBuilder.Entity("ACC.Data.Entities.AulaEstudiante", b =>
                {
                    b.HasOne("ACC.Data.Entities.Aula", "Aula")
                        .WithMany("AulaEstudiantes")
                        .HasForeignKey("AulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACC.Data.Entities.Usuario", "Usuario")
                        .WithMany("AulasEstudiantes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aula");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ACC.Data.Entities.Aviso", b =>
                {
                    b.HasOne("ACC.Data.Entities.Aula", "Aula")
                        .WithMany("Avisos")
                        .HasForeignKey("AulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aula");
                });

            modelBuilder.Entity("ACC.Data.Entities.Capitulo", b =>
                {
                    b.HasOne("ACC.Data.Entities.Leccion", "Leccion")
                        .WithMany("Capitulos")
                        .HasForeignKey("LeccionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ACC.Data.Entities.Modulo", "Modulo")
                        .WithMany("Capitulos")
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ACC.Data.Entities.SubModulo", "SubModulo")
                        .WithMany("Capitulos")
                        .HasForeignKey("SubmoduloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ACC.Data.Entities.Tema", "Tema")
                        .WithMany("Capitulos")
                        .HasForeignKey("TemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leccion");

                    b.Navigation("Modulo");

                    b.Navigation("SubModulo");

                    b.Navigation("Tema");
                });

            modelBuilder.Entity("ACC.Data.Entities.CapituloTags", b =>
                {
                    b.HasOne("ACC.Data.Entities.Capitulo", "Capitulo")
                        .WithMany("CapituloTags")
                        .HasForeignKey("Id_Capitulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACC.Data.Entities.Tag", "Tag")
                        .WithMany("CapituloTags")
                        .HasForeignKey("Id_Tag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capitulo");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ACC.Data.Entities.ContenidoCapitulo", b =>
                {
                    b.HasOne("ACC.Data.Entities.Capitulo", "Capitulo")
                        .WithMany("Contenidos")
                        .HasForeignKey("CapituloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capitulo");
                });

            modelBuilder.Entity("ACC.Data.Entities.ExamenHabilitado", b =>
                {
                    b.HasOne("ACC.Data.Entities.SubModulo", "SubModulo")
                        .WithMany()
                        .HasForeignKey("Id_SubModulo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ACC.Data.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubModulo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ACC.Data.Entities.HistorialCalificaciones", b =>
                {
                    b.HasOne("ACC.Data.Entities.Modulo", "Modulo")
                        .WithMany()
                        .HasForeignKey("Id_Modulo");

                    b.HasOne("ACC.Data.Entities.SubModulo", "SubModulo")
                        .WithMany()
                        .HasForeignKey("Id_SubModulo");

                    b.HasOne("ACC.Data.Entities.Usuario", "Usuario")
                        .WithMany("HistorialCalificaciones")
                        .HasForeignKey("Id_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modulo");

                    b.Navigation("SubModulo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ACC.Data.Entities.Leccion", b =>
                {
                    b.HasOne("ACC.Data.Entities.SubTema", "SubTema")
                        .WithMany("Lecciones")
                        .HasForeignKey("SubtemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubTema");
                });

            modelBuilder.Entity("ACC.Data.Entities.ModuloTags", b =>
                {
                    b.HasOne("ACC.Data.Entities.Modulo", "Modulo")
                        .WithMany("ModuloTags")
                        .HasForeignKey("Id_Modulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACC.Data.Entities.Tag", "Tag")
                        .WithMany("ModuloTags")
                        .HasForeignKey("Id_Tag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modulo");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ACC.Data.Entities.Notificacion", b =>
                {
                    b.HasOne("ACC.Data.Entities.Aula", "Aula")
                        .WithMany("Notificaciones")
                        .HasForeignKey("AulaId");

                    b.HasOne("ACC.Data.Entities.Usuario", "Usuario")
                        .WithMany("Notificaciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aula");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ACC.Data.Entities.ProgresoUsuario", b =>
                {
                    b.HasOne("ACC.Data.Entities.SubTema", "SubTema")
                        .WithMany()
                        .HasForeignKey("SubTemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubTema");
                });

            modelBuilder.Entity("ACC.Data.Entities.SubModulo", b =>
                {
                    b.HasOne("ACC.Data.Entities.Modulo", "Modulo")
                        .WithMany("SubModulos")
                        .HasForeignKey("Id_Modulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modulo");
                });

            modelBuilder.Entity("ACC.Data.Entities.SubTema", b =>
                {
                    b.HasOne("ACC.Data.Entities.Tema", "Tema")
                        .WithMany("SubTemas")
                        .HasForeignKey("Id_Tema")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tema");
                });

            modelBuilder.Entity("ACC.Data.Entities.TareaAsignada", b =>
                {
                    b.HasOne("ACC.Data.Entities.Agenda", "Agenda")
                        .WithMany("TareasAsignadas")
                        .HasForeignKey("AgendaId");

                    b.HasOne("ACC.Data.Entities.Aula", null)
                        .WithMany("Tareas")
                        .HasForeignKey("AulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agenda");
                });

            modelBuilder.Entity("ACC.Data.Entities.TareaPersonal", b =>
                {
                    b.HasOne("ACC.Data.Entities.Agenda", "Agenda")
                        .WithMany("TareasPersonales")
                        .HasForeignKey("IdAgenda");

                    b.Navigation("Agenda");
                });

            modelBuilder.Entity("ACC.Data.Entities.Tema", b =>
                {
                    b.HasOne("ACC.Data.Entities.SubModulo", "SubModulo")
                        .WithMany("Temas")
                        .HasForeignKey("Id_SubModulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubModulo");
                });

            modelBuilder.Entity("ACC.Data.Entities.TemaTags", b =>
                {
                    b.HasOne("ACC.Data.Entities.Tag", "Tag")
                        .WithMany("TemaTags")
                        .HasForeignKey("Id_Tag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACC.Data.Entities.Tema", "Tema")
                        .WithMany("TemaTags")
                        .HasForeignKey("Id_Tema")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Tema");
                });

            modelBuilder.Entity("ACC.Data.Entities.UsuarioModulos", b =>
                {
                    b.HasOne("ACC.Data.Entities.Modulo", "Modulo")
                        .WithMany("UsuarioModulos")
                        .HasForeignKey("Id_Modulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACC.Data.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modulo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ACC.Data.Entities.UsuarioSubModulos", b =>
                {
                    b.HasOne("ACC.Data.Entities.SubModulo", "SubModulo")
                        .WithMany("UsuarioSubModulos")
                        .HasForeignKey("Id_SubModulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACC.Data.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubModulo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ACC.Data.Entities.UsuarioSubTemas", b =>
                {
                    b.HasOne("ACC.Data.Entities.SubTema", "SubTema")
                        .WithMany("UsuarioSubTemas")
                        .HasForeignKey("Id_SubTema")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACC.Data.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubTema");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ACC.Data.Entities.UsuarioTemas", b =>
                {
                    b.HasOne("ACC.Data.Entities.Tema", "Tema")
                        .WithMany("UsuarioTemas")
                        .HasForeignKey("Id_Tema")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACC.Data.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tema");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ACC.Data.Entities.Agenda", b =>
                {
                    b.Navigation("TareasAsignadas");

                    b.Navigation("TareasPersonales");
                });

            modelBuilder.Entity("ACC.Data.Entities.Aula", b =>
                {
                    b.Navigation("AulaEstudiantes");

                    b.Navigation("Avisos");

                    b.Navigation("Notificaciones");

                    b.Navigation("Tareas");
                });

            modelBuilder.Entity("ACC.Data.Entities.Capitulo", b =>
                {
                    b.Navigation("CapituloTags");

                    b.Navigation("Contenidos");
                });

            modelBuilder.Entity("ACC.Data.Entities.Leccion", b =>
                {
                    b.Navigation("Capitulos");
                });

            modelBuilder.Entity("ACC.Data.Entities.Modulo", b =>
                {
                    b.Navigation("Aulas");

                    b.Navigation("Capitulos");

                    b.Navigation("ModuloTags");

                    b.Navigation("SubModulos");

                    b.Navigation("UsuarioModulos");
                });

            modelBuilder.Entity("ACC.Data.Entities.SubModulo", b =>
                {
                    b.Navigation("Capitulos");

                    b.Navigation("Temas");

                    b.Navigation("UsuarioSubModulos");
                });

            modelBuilder.Entity("ACC.Data.Entities.SubTema", b =>
                {
                    b.Navigation("Lecciones");

                    b.Navigation("UsuarioSubTemas");
                });

            modelBuilder.Entity("ACC.Data.Entities.Tag", b =>
                {
                    b.Navigation("CapituloTags");

                    b.Navigation("ModuloTags");

                    b.Navigation("TemaTags");
                });

            modelBuilder.Entity("ACC.Data.Entities.Tema", b =>
                {
                    b.Navigation("Capitulos");

                    b.Navigation("SubTemas");

                    b.Navigation("TemaTags");

                    b.Navigation("UsuarioTemas");
                });

            modelBuilder.Entity("ACC.Data.Entities.Usuario", b =>
                {
                    b.Navigation("Agenda")
                        .IsRequired();

                    b.Navigation("Auditorias");

                    b.Navigation("AulasDocente");

                    b.Navigation("AulasEstudiantes");

                    b.Navigation("HistorialCalificaciones");

                    b.Navigation("Notificaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
