@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ACC.WebApp.Data;

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Gestionar tu correo</PageTitle>

    <div class="biblioteca-doc-item" style="max-width: 500px; margin: 40px auto;">
        <div class="biblioteca-doc-header">
            <h3 class="biblioteca-section-title">Gestionar tu correo</h3>
        </div>
        <section class="biblioteca-doc-content">
            <StatusMessage Message="@message" />
            <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form"
                method="post">
                <AntiforgeryToken />
            </form>
            <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                @if (isEmailConfirmed)
                {
                    <div class="form-floating mb-3 input-group">
                        <input type="text" value="@email" class="form-control" placeholder="Por favor, ingresa tu email."
                            disabled />
                        <div class="input-group-append">
                            <span class="h-100 input-group-text text-success font-weight-bold">✓</span>
                        </div>
                        <label for="email" class="form-label">Email</label>
                    </div>
                }
                else
                {
                    <div class="form-floating mb-3">
                        <input type="text" value="@email" class="form-control" placeholder="Por favor, ingresa tu email."
                            disabled />
                        <label for="email" class="form-label">Email</label>
                        <button type="submit" class="biblioteca-btn-completar-subtema" form="send-verification-form">Enviar
                            correo de verificación</button>
                    </div>
                }
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.NewEmail" class="form-control" autocomplete="email"
                        aria-required="true" placeholder="Por favor, ingresa nuevo email." />
                    <label for="new-email" class="form-label">Nuevo email</label>
                    <ValidationMessage For="() => Input.NewEmail" class="text-danger" />
                </div>
                <button type="submit" class="biblioteca-btn-completar-subtema w-100">Cambiar email</button>
            </EditForm>
        </section>
    </div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Tu email no ha cambiado.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
        new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Enlace de confirmación enviado. Por favor, revisa tu correo.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Correo de verificación enviado. Por favor, revisa tu correo.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Nuevo email")]
        public string? NewEmail { get; set; }
    }
}
