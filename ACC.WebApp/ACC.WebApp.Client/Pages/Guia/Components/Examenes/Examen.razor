@inject AuthenticationStateProvider AuthProvider
@inject ProgresoUsuarioClient ProgresoService

<div class="examen-card">
    <div class="examen-icon-title">
        <span class="examen-icon">🏆</span>
        <span class="examen-title">@ExamenNombre</span>
    </div>
    <div class="examen-desc">@ExamenDescripcion</div>
    @if (examenDesbloqueado)
    {
        <button class="examen-btn" @onclick="@RealizarExamen">
            ¡Enfrentar el Desafío!
        </button>
    }
    else
    {
        <button class="examen-btn examen-btn-locked" disabled>
            Examen Bloqueado
        </button>
    }
</div>
<br />

<style>
.examen-card {
    background: #1e1e2a;
    border: 2.5px solid #8b5cf6;
    border-radius: 14px;
    box-shadow: 0 6px 32px rgba(139,92,246,0.10), 0 1.5px 0 #8b5cf6;
    padding: 24px 40px;
    margin-top: 32px;
    width: 100%;
    min-height: 110px;
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 32px;
    transition: box-shadow 0.3s;
    position: relative;
    box-sizing: border-box;
}

.examen-icon-title {
    display: flex;
    align-items: center;
    gap: 12px;
    min-width: 210px;
}

.examen-icon {
    font-size: 2.1rem;
    filter: drop-shadow(0 2px 8px #8b5cf6aa);
}

.examen-title {
    font-size: 1.25rem;
    font-weight: 800;
    color: #8b5cf6;
    letter-spacing: 0.06em;
    font-family: Nunito, Arial, sans-serif;
    text-shadow: 0 2px 12px rgba(139,92,246,0.18);
    text-transform: uppercase;
}

.examen-desc {
    color: #cbd5e1;
    font-size: 1.08rem;
    text-align: left;
    font-family: Nunito, Arial, sans-serif;
    flex: 1 1 auto;
    margin-right: 16px;
}

.examen-btn {
    background: linear-gradient(90deg, #8b5cf6 60%, #4f46e5 100%);
    color: #fff;
    font-weight: 700;
    font-size: 1.13rem;
    border: none;
    border-radius: 8px;
    padding: 14px 32px;
    box-shadow: 0 2px 12px rgba(139,92,246,0.13);
    cursor: pointer;
    letter-spacing: 0.04em;
    transition: background 0.2s, transform 0.15s, box-shadow 0.2s;
    text-shadow: 0 1px 6px rgba(76, 29, 149, 0.13);
    outline: none;
    min-width: 180px;
    margin-left: 8px;
}

.examen-btn:hover:enabled {
    background: linear-gradient(90deg, #a78bfa 60%, #6366f1 100%);
    transform: scale(1.04);
    box-shadow: 0 4px 20px rgba(139,92,246,0.18);
}

.examen-btn-locked {
    background: repeating-linear-gradient(135deg, #2d2d44 0 10px, #23233a 10px 20px);
    color: #bdbdfc;
    font-weight: 700;
    font-size: 1.13rem;
    border: 2px dashed #8b5cf6;
    border-radius: 8px;
    box-shadow: 0 2px 12px rgba(139,92,246,0.10);
    cursor: not-allowed;
    letter-spacing: 0.04em;
    opacity: 0.75;
    filter: grayscale(0.2) blur(0.2px);
    position: relative;
    overflow: hidden;
    text-shadow: 0 1px 6px rgba(76, 29, 149, 0.10);
    outline: none;
    min-width: 180px;
    margin-left: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
}

.examen-btn-locked-icon {
    font-size: 1.3em;
    opacity: 0.7;
}
@@media (max-width: 900px) {
    .examen-card {
        flex-direction: column;
        gap: 18px;
        padding: 18px 8px;
        min-width: 0;
    }
    .examen-desc {
        margin-right: 0;
        text-align: center;
    }
    .examen-btn, .examen-btn-locked {
        width: 100%;
        min-width: 0;
        margin-left: 0;
    }
    .examen-icon-title {
        min-width: 0;
        justify-content: center;
    }
}
</style>

@code {
    [Parameter] public int SubModuloId { get; set; }
    [Parameter] public string ExamenNombre { get; set; } = "Examen";
    [Parameter] public string ExamenDescripcion { get; set; } = "";
    [Parameter] public EventCallback<int> OnRealizarExamen { get; set; }

    private bool examenDesbloqueado;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthProvider.GetAuthenticationStateAsync();
        var userId = auth.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(userId))
        {
            examenDesbloqueado = await ProgresoService.ExamenHabilitadoAsync(userId, SubModuloId);
        }
    }

    private async Task RealizarExamen()
    {
        if (examenDesbloqueado)
            await OnRealizarExamen.InvokeAsync(SubModuloId);
    }
}