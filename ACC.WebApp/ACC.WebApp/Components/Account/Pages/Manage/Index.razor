@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using ACC.WebApp.Data;

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Perfil</PageTitle>

    <div class="biblioteca-doc-item" style="max-width: 500px; margin: 40px auto;">
        <div class="biblioteca-doc-header">
            <h3 class="biblioteca-section-title">Perfil</h3>
        </div>
        <section class="biblioteca-doc-content">
            <StatusMessage />
            <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <input type="text" value="@username" class="form-control"
                        placeholder="Por favor, elige tu nombre de usuario." disabled />
                    <label for="username" class="form-label">Nombre de usuario</label>
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.PhoneNumber" class="form-control"
                        placeholder="Por favor, ingresa tu número telefónico." />
                    <label for="phone-number" class="form-label">Número telefónico</label>
                    <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                </div>
                <button type="submit" class="biblioteca-btn-completar-subtema w-100">Guardar</button>
            </EditForm>
        </section>
    </div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: No se pudo establecer el número telefónico.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Tu perfil ha sido actualizado", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Número telefónico")]
        public string? PhoneNumber { get; set; }
    }
}